const { expect, assert } = require('chai');
const { BigNumber } = require('ethers');

//完整走完一个流程，两个用户挖一个币
describe('KingKongChef-2user-1pool-1', function () {
	let accounts
	let erc
	let kkt
	let chef
	let startBlock
	let rewardPerBlock = 100

	before(async function () {
		accounts = await ethers.getSigners()

		const ERC = await ethers.getContractFactory('MockERC20')
		erc = await ERC.deploy('OKB', b(40), 18)
		await erc.deployed();

		await erc.transfer(accounts[1].address, b(20))
		await erc.transfer(accounts[2].address, b(20))

		const KKT = await ethers.getContractFactory('KingKongToken')
		kkt = await KKT.deploy();
		await kkt.deployed();

		let blockNum = await ethers.provider.getBlockNumber()
		startBlock = blockNum + 2
		const MasterChef = await ethers.getContractFactory('MasterChef')
		chef = await MasterChef.deploy(kkt.address, accounts[0].address, b(rewardPerBlock), b(startBlock))
		await chef.deployed()

		await kkt.transferOwnership(chef.address)
	})

	it('add', async function () {
		await chef.add(b(1), erc.address, true)
		console.log('account0 add')
		
		await print()
	})

	it('deposit', async function () {
		await erc.connect(accounts[1]).approve(chef.address, b(5))
		await chef.connect(accounts[1]).deposit(b(0), b(5))
		console.log('account1 deposit 5')

		await print()
	})

	it('harvest', async function () {
		await chef.connect(accounts[1]).deposit(b(0), b(0))
		console.log('account1 harvest')
		
		await print()
	})

	it('after 10 block', async function () {
		for (let i=0; i<10; i++) {
			await erc.approve(chef.address, b(0)) //空块
		}
	})

	it('harvest', async function () {
		await chef.connect(accounts[1]).deposit(b(0), b(0))
		console.log('account1 harvest')
		
		await print()
	})
	
	it('deposit', async function () {
		await erc.connect(accounts[2]).approve(chef.address, b(10))
		await chef.connect(accounts[2]).deposit(b(0), b(10))
		console.log('account2 deposit 10')

		await print()
	})

	it('after 10 block', async function () {
		for (let i=0; i<10; i++) {
			await erc.approve(chef.address, b(0)) //空块
		}
	})

	it('deposit', async function () {
		await erc.connect(accounts[1]).approve(chef.address, b(10))
		await chef.connect(accounts[1]).deposit(b(0), b(10))
		console.log('account1 deposit 10')

		await print()
	})

	it('after 10 block', async function () {
		for (let i=0; i<10; i++) {
			await erc.approve(chef.address, b(0)) //空块
		}
	})

	it('harvest', async function () {
		await chef.connect(accounts[2]).deposit(b(0), b(0))
		console.log('account2 harvest')
		
		await print()
	})

	it('after 10 block', async function () {
		for (let i=0; i<10; i++) {
			await erc.approve(chef.address, b(0)) //空块
		}
	})

	it('deposit', async function () {
		await erc.connect(accounts[1]).approve(chef.address, b(5))
		await chef.connect(accounts[1]).deposit(b(0), b(5))
		console.log('account1 deposit 5')

		await print()
	})

	it('after 10 block', async function () {
		for (let i=0; i<10; i++) {
			await erc.approve(chef.address, b(0)) //空块
		}
	})

	it('harvest', async function () {
		await chef.connect(accounts[1]).deposit(b(0), b(0))
		console.log('account1 harvest')
		
		await print()
	})

	it('after 10 block', async function () {
		for (let i=0; i<10; i++) {
			await erc.approve(chef.address, b(0)) //空块
		}
	})

	it('withdraw', async function () {
		await chef.connect(accounts[2]).withdraw(b(0), b(5))
		console.log('account2 withdraw 5')

		await print()
	})

	it('after 10 block', async function () {
		for (let i=0; i<10; i++) {
			await erc.approve(chef.address, b(0)) //空块
		}
	})

	it('harvest', async function () {
		await chef.connect(accounts[1]).deposit(b(0), b(0))
		console.log('account1 harvest')
		
		await print()
	})

	it('after 10 block', async function () {
		for (let i=0; i<10; i++) {
			await erc.approve(chef.address, b(0)) //空块
		}
	})

	it('withdraw', async function () {
		await chef.connect(accounts[1]).withdraw(b(0), b(20))
		console.log('account1 withdraw 20')
		await chef.connect(accounts[2]).withdraw(b(0), b(5))
		console.log('account2 withdraw 5')

		assert(n(await kkt.balanceOf(accounts[0].address)) == 940, 'account0 kkt error')
		assert(n(await erc.balanceOf(accounts[0].address)) == 0, 'account0 erc error')
		assert(n(await kkt.balanceOf(accounts[1].address)) == 6406, 'account1 kkt error')
		assert(n(await erc.balanceOf(accounts[1].address)) == 20, 'account1 erc error')
		assert(n(await kkt.balanceOf(accounts[2].address)) == 2993, 'account2 kkt error')
		assert(n(await erc.balanceOf(accounts[2].address)) == 20, 'account2 erc error')
		assert(n(await kkt.balanceOf(chef.address)) == 1, 'chef kkt error')
		assert(n(await erc.balanceOf(chef.address)) == 0, 'chef erc error')

		await print()
	})


	async function print() {
		let pool = await chef.poolInfo(b(0))
		console.log('')
		console.log('blockNum:', await ethers.provider.getBlockNumber())
		console.log(
			'account0 kkt:', n(await kkt.balanceOf(accounts[0].address)), 
			'pendingKKT', n(await chef.pendingKKT(b(0), accounts[0].address)),
			'erc_in_chef:', n((await chef.userInfo(b(0), accounts[0].address)).amount),
			'rewardDebt:', n((await chef.userInfo(b(0), accounts[0].address)).rewardDebt),
			'erc:', n(await erc.balanceOf(accounts[0].address))
			)
		console.log(
			'account1 kkt:', n(await kkt.balanceOf(accounts[1].address)),
			'pendingKKT', n(await chef.pendingKKT(b(0), accounts[1].address)),
			'erc_in_chef:', n((await chef.userInfo(b(0), accounts[1].address)).amount),
			'rewardDebt:', n((await chef.userInfo(b(0), accounts[1].address)).rewardDebt),
			'erc:', n(await erc.balanceOf(accounts[1].address))
			)
		console.log(
			'account2 kkt:', n(await kkt.balanceOf(accounts[2].address)),
			'pendingKKT', n(await chef.pendingKKT(b(0), accounts[2].address)),
			'erc_in_chef:', n((await chef.userInfo(b(0), accounts[2].address)).amount),
			'rewardDebt:', n((await chef.userInfo(b(0), accounts[2].address)).rewardDebt),
			'erc:', n(await erc.balanceOf(accounts[2].address))
			)
		console.log(
			'chef kkt:', n(await kkt.balanceOf(chef.address)), 
			'erc:', n(await erc.balanceOf(chef.address))
			)

		console.log(
			'pool lpToken:', pool.lpToken, 
			'pool accKKTPerShare:', n(pool.accKKTPerShare), 
			'lastRewardBlock:', n(pool.lastRewardBlock)
			)
		console.log('')
	}

	function m(num) {
		return BigNumber.from('1000000000000000000').mul(num)
	}
	
	function d(bn) {
		return bn.div('1000000000').toNumber() / 1000000000
	}

	function b(num) {
		return BigNumber.from(num)
	}

	function n(bn) {
		return bn.toNumber()
	}
})
