const { expect } = require('chai');
const { BigNumber } = require('ethers');

describe('KingKongChef', function () {
	let accounts
	let erc
	let kkt
	let chef

	before(async function () {
		accounts = await ethers.getSigners()

		const ERC = await ethers.getContractFactory('MockERC20');
		erc = await ERC.deploy('OKB', m(10000), 18);
		await erc.deployed();

		const KKT = await ethers.getContractFactory('KingKongToken');
		kkt = await KKT.deploy();
		await kkt.deployed();

		const KingKongChef = await ethers.getContractFactory('KingKongChef');
		chef = await KingKongChef.deploy(kkt.address);
		await chef.deployed();
	})

	it('addPool and deposit', async function () {
		await kkt.mint(accounts[0].address, m(1))

		await chef.addPool(erc.address, m(1), m(0))
		let pool = await chef.poolInfo(erc.address)
		console.log(pool.rewardToken, d(pool.rewardPerBlock), pool.lastRewardBlock.toNumber(), d(pool.harvestMinKKT))

		await erc.transfer(chef.address, m(1000))
		
		await kkt.approve(chef.address, m(1))
		await chef.deposit(m(1))

		console.log('accounts 0 kkt balance', d(await kkt.balanceOf(accounts[0].address)))
		console.log('chef kkt balance', d(await kkt.balanceOf(chef.address)))
		console.log('accounts 0 chef balance', d(await chef.balanceOf(accounts[0].address)))
		console.log('chef erc balance', d(await erc.balanceOf(chef.address)))
	})

	it('mining', async function () {
		let pending = await chef.pendingReward(accounts[0].address, erc.address)
		let blockNum = await ethers.provider.getBlockNumber()
		console.log('pending', d(pending), blockNum)

		for (let i=0; i<10; i++) {
			await chef.harvest(erc.address, accounts[1].address)
		}
		console.log('chef erc balance', d(await erc.balanceOf(chef.address)))
		console.log('accounts 1 erc balance', d(await erc.balanceOf(accounts[1].address)))
	})

	it('removePool and withdraw', async function () {
		await chef.removePool(erc.address)
		let pool = await chef.poolInfo(erc.address)
		console.log(pool.rewardToken, d(pool.rewardPerBlock), pool.lastRewardBlock.toNumber(), d(pool.harvestMinKKT))

		let bal = await chef.balanceOf(accounts[0].address)
		console.log('accounts 0 chef balance', d(bal))
		await chef.withdraw(bal)
		console.log('accounts 0 kkt balance', d(await kkt.balanceOf(accounts[0].address)))
		console.log('chef kkt balance', d(await kkt.balanceOf(chef.address)))
	})
})

function m(num) {
	return BigNumber.from('1000000000000000000').mul(num)
}

function d(bn) {
	return bn.div('1000000000').toNumber() / 1000000000
}