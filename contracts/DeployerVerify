// SPDX-License-Identifier: MIT

pragma solidity 0.6.12;

library SafeMath {
    /**
     * @dev Returns the addition of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        uint256 c = a + b;
        if (c < a) return (false, 0);
        return (true, c);
    }

    /**
     * @dev Returns the substraction of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        if (b > a) return (false, 0);
        return (true, a - b);
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
        // benefit is lost if 'b' is also tested.
        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
        if (a == 0) return (true, 0);
        uint256 c = a * b;
        if (c / a != b) return (false, 0);
        return (true, c);
    }

    /**
     * @dev Returns the division of two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        if (b == 0) return (false, 0);
        return (true, a / b);
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        if (b == 0) return (false, 0);
        return (true, a % b);
    }

    /**
     * @dev Returns the addition of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `+` operator.
     *
     * Requirements:
     *
     * - Addition cannot overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");
        return c;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b <= a, "SafeMath: subtraction overflow");
        return a - b;
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `*` operator.
     *
     * Requirements:
     *
     * - Multiplication cannot overflow.
     */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) return 0;
        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");
        return c;
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b > 0, "SafeMath: division by zero");
        return a / b;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b > 0, "SafeMath: modulo by zero");
        return a % b;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
     * overflow (when the result is negative).
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {trySub}.
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        return a - b;
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting with custom message on
     * division by zero. The result is rounded towards zero.
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {tryDiv}.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        return a / b;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting with custom message when dividing by zero.
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {tryMod}.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        return a % b;
    }
}


library Address {
    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // This method relies on extcodesize, which returns 0 for contracts in
        // construction, since the code is only stored at the end of the
        // constructor execution.

        uint256 size;
        // solhint-disable-next-line no-inline-assembly
        assembly { size := extcodesize(account) }
        return size > 0;
    }

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value
        (bool success, ) = recipient.call{ value: amount }("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain`call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason, it is bubbled up by this
     * function (like regular Solidity function calls).
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
      return functionCall(target, data, "Address: low-level call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
     * `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        require(isContract(target), "Address: call to non-contract");

        // solhint-disable-next-line avoid-low-level-calls
        (bool success, bytes memory returndata) = target.call{ value: value }(data);
        return _verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
        require(isContract(target), "Address: static call to non-contract");

        // solhint-disable-next-line avoid-low-level-calls
        (bool success, bytes memory returndata) = target.staticcall(data);
        return _verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
        require(isContract(target), "Address: delegate call to non-contract");

        // solhint-disable-next-line avoid-low-level-calls
        (bool success, bytes memory returndata) = target.delegatecall(data);
        return _verifyCallResult(success, returndata, errorMessage);
    }

    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
        if (success) {
            return returndata;
        } else {
            // Look for revert reason and bubble it up if present
            if (returndata.length > 0) {
                // The easiest way to bubble the revert reason is using memory via assembly

                // solhint-disable-next-line no-inline-assembly
                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}

interface IERC20 {
    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);
}


library SafeERC20 {
    using SafeMath for uint256;
    using Address for address;

    function safeTransfer(IERC20 token, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
    }

    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
    }

    /**
     * @dev Deprecated. This function has issues similar to the ones found in
     * {IERC20-approve}, and its usage is discouraged.
     *
     * Whenever possible, use {safeIncreaseAllowance} and
     * {safeDecreaseAllowance} instead.
     */
    function safeApprove(IERC20 token, address spender, uint256 value) internal {
        // safeApprove should only be called when setting an initial allowance,
        // or when resetting it to zero. To increase and decrease it, use
        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'
        // solhint-disable-next-line max-line-length
        require((value == 0) || (token.allowance(address(this), spender) == 0),
            "SafeERC20: approve from non-zero to non-zero allowance"
        );
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
    }

    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
        uint256 newAllowance = token.allowance(address(this), spender).add(value);
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }

    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     */
    function _callOptionalReturn(IERC20 token, bytes memory data) private {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that
        // the target address contains contract code and also asserts for success in the low-level call.

        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
        if (returndata.length > 0) { // Return data is optional
            // solhint-disable-next-line max-line-length
            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
        }
    }
}


abstract contract Context {
    function _msgSender() internal view virtual returns (address payable) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes memory) {
        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691
        return msg.data;
    }
}


abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor () internal {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}



//谁创建谁是管理员
contract KingChef is Ownable {
    using SafeMath for uint256;
    using SafeERC20 for IERC20;

    struct PoolInfo {
        uint256 poolId; //用区块高度作为poolId
        IERC20 rewardToken; //挖什么币
        uint256 rewardPerBlock; //每个区块出多少个币
        uint256 lastRewardBlock; //最后一次更新accPerShare的区块高度
        uint256 accPerShare; //用户持有一个stakeToken，可以挖多少个rewardToken，考虑精度，这个值要乘以1e12，随时间自增，自增即出矿
        uint256 balance; //矿池还有多少币可以挖
        uint256 amount; //创建矿池的时候投放了多少个币
        uint256 bonusStartBlock; //什么时候开始挖
        uint256 bonusEndBlock; //什么时候结束，创建矿池的时候计算出来的
        address back; //创建矿池的时候矿币从哪来的，移除矿池的时候如果有剩余的矿币就原路返回
    }

    //同时挖的矿池的地址
    address[] public activeArr = new address[](9);

    //rewardToken->PoolInfo，通过activeArr拿到矿池地址，再通过poolMap找到矿池信息
    mapping (address => PoolInfo) public poolMap;

    //poolId->user->rewardDebt，记录用户已经挖了多少，随时间自增，如果用户中途进来，那么之前错过的也算入rewardDebt
    //为什么不用rewardAddress：为了保证每个pool的rewardDebt都是独立的，即使同样矿币的pool，也有不同的id
    mapping (uint256 => mapping (address => uint256)) rewardDebt;

    //抵押币
    IERC20 public stakeToken;

    //总共抵押了多少个币，替代stakeToken.balanceOf(address(this))，避免直接transfer到合约造成数据不准
    uint256 public totalStake;

    //记录每个用户抵押了多少个币
    mapping (address => uint256) public balanceOf;

    event Deposit(address indexed user, uint256 amount);
    event Withdraw(address indexed user, uint256 amount);
    event Harvest(address indexed user, address indexed rewardToken, uint256 amount, address indexed to);
    event EmergencyWithdraw(address indexed user, uint256 amount);


    constructor(address _stakeAddress) public {
        stakeToken = IERC20(_stakeAddress);
    }


    // //查看用户在某个矿池的rewardDebt，测试的时候用
    function getRewardDebt(address _user, address _rewardAddress) public view returns (uint256) {
        //从poolMap取的pool，必须是storage，因为pool里面有mapping
        PoolInfo storage pool = poolMap[_rewardAddress];
        if (address(pool.rewardToken) == address(0)) {
            return 0;
        }
        return rewardDebt[pool.poolId][_user];
    }


    //需要把矿币tansfer给本合约，再由管理员调用addPool，一个矿币对应一个矿池，不能两个矿池都挖同一种币
    function addPool(address _rewardAddress, uint256 _rewardPerBlock, uint256 _bonusStartBlock, uint256 _bonusEndBlock, address _back) public onlyOwner {
        require(_bonusStartBlock > block.number, 'addPool: bonusStartBlock error');

        PoolInfo memory pool = poolMap[_rewardAddress];
        require(address(pool.rewardToken) == address(0), 'addPool: already exist');

        //bonusStartBlock是可以挖的第一个区块，bonusEndBlock是结束区块，不能挖
        uint256 needAmount = _bonusEndBlock.sub(_bonusStartBlock).mul(_rewardPerBlock);
        IERC20 rewardToken = IERC20(_rewardAddress);
        uint256 amount = rewardToken.balanceOf(address(this));

        //避免把用户stake的数量也算作amount
        if (_rewardAddress == address(stakeToken)) {
            amount = amount.sub(totalStake);
        }
        require(amount >= needAmount && needAmount > 0, 'addPool: amount error');

        //如果转进来的reward多了，退给_back
        uint256 bal = amount.sub(needAmount);
        if (bal > 0) {
            rewardToken.safeTransfer(_back, bal);
        }

        bool success = false;
        address[] memory actives = activeArr;
        for (uint8 i = 0; i < actives.length; i++) {
            address activeAddress = actives[i];
            if (activeAddress == address(0)) {
                if (!success) {
                    activeArr[i] = _rewardAddress;
                    success = true;
                }
            } else {
                pool = poolMap[activeAddress];
                require(pool.poolId != block.number, 'addPool: poolId error');
            }
        }

        require(success, 'addPool: active full');

        poolMap[_rewardAddress] = PoolInfo(block.number, rewardToken, _rewardPerBlock, _bonusStartBlock-1, 0, needAmount, needAmount, _bonusStartBlock, _bonusEndBlock, _back);
    }


    //移除矿池，矿池数量上限是9个，超过就需要移除老矿池
    function removePool(address _rewardAddress) public onlyOwner {
        PoolInfo storage pool = poolMap[_rewardAddress];
        require(address(pool.rewardToken) != address(0), 'removePool: not exist');

        //剩余的矿币，原路返回
        if (pool.balance > 0) {
            uint256 balance = pool.rewardToken.balanceOf(address(this));
            if (balance >= pool.balance) {
                pool.rewardToken.safeTransfer(pool.back, pool.balance);
            }
        }

        delete poolMap[_rewardAddress];

        address[] memory actives = activeArr;
        for (uint8 i = 0; i < actives.length; i++) {
            if (actives[i] == _rewardAddress) {
                delete activeArr[i];
                break;
            }
        }
    }


    //经过了多少个区块
    function getMultiplier(uint256 _from, uint256 _to) public pure returns (uint256) {
        if (_to > _from) {
            return _to - _from;
        }
        return 0;
    }


    //充值stakeToken
    function deposit(uint256 _amount) public {
        require(_amount > 0, 'deposit: not good');

        uint256 myStakeAmount = balanceOf[msg.sender];
        if (myStakeAmount == 0) {
            //首次充值进来，rewardDebt的更新不能用harvestAll，massUpdatePools只是做个义务劳动
            massUpdatePools();
        } else {
            //先收矿
            harvestAll(msg.sender);
        }

        //充值
        stakeToken.safeTransferFrom(msg.sender, address(this), _amount);
        uint256 myStakeAmount_after = myStakeAmount.add(_amount);
        balanceOf[msg.sender] = myStakeAmount_after;
        totalStake = totalStake.add(_amount);

        //充值提现，都要重新计算rewardDebt，当作是之前的已经结算了，根据新的stake来计算后续的产出
        address[] memory actives = activeArr;
        for (uint8 i = 0; i < actives.length; i++) {
            address rewardAddress = actives[i];
            if (rewardAddress != address(0)) {
                PoolInfo storage pool = poolMap[rewardAddress];
                //首次充值，由公式计算rewardDebt
                rewardDebt[pool.poolId][msg.sender] = myStakeAmount_after.mul(pool.accPerShare).div(1e12);
            }
        }

        emit Deposit(msg.sender, _amount);
    }


    //提现stakeToken
    function withdraw(uint256 _amount) public {
        uint256 myStakeAmount = balanceOf[msg.sender];
        require(myStakeAmount >= _amount && _amount > 0, 'withdraw: not good');

        //先收矿
        harvestAll(msg.sender);

        //提现
        uint256 myStakeAmount_after = myStakeAmount.sub(_amount);
        balanceOf[msg.sender] = myStakeAmount_after;
        totalStake = totalStake.sub(_amount);
        stakeToken.safeTransfer(msg.sender, _amount);

        //充值提现，都要重新计算rewardDebt，当作是之前的已经结算了，根据新的stake来计算后续的产出
        address[] memory actives = activeArr;
        for (uint8 i = 0; i < actives.length; i++) {
            address rewardAddress = actives[i];
            if (rewardAddress != address(0)) {
                PoolInfo storage pool = poolMap[rewardAddress];
                //首次充值，由公式计算rewardDebt
                rewardDebt[pool.poolId][msg.sender] = myStakeAmount_after.mul(pool.accPerShare).div(1e12);
            }
        }

        emit Withdraw(msg.sender, _amount);
    }


    //收矿，可以指定接收账户，一般是msg.sender自己
    function harvestAll(address to) public {
        massUpdatePools();

        address[] memory actives = activeArr;
        for (uint8 i = 0; i < actives.length; i++) {
            address rewardAddress = actives[i];
            if (rewardAddress != address(0)) {
                harvest(rewardAddress, to);
            }
        }
    }

    //收某个矿，为了避免混乱，标记为internal，只允许harvestAll
    function harvest(address _rewardAddress, address to) internal {
        uint256 myStakeAmount = balanceOf[msg.sender];
        uint256 pending = pendingReward(msg.sender, _rewardAddress);
        PoolInfo storage pool = poolMap[_rewardAddress];

        if (pending > 0) {
            pool.balance = pool.balance.sub(pending);
            rewardDebt[pool.poolId][msg.sender] = myStakeAmount.mul(pool.accPerShare).div(1e12);
            pool.rewardToken.safeTransfer(to, pending);
            emit Harvest(msg.sender, _rewardAddress, pending, to);
        }
    }


    //待收矿的数量
    function pendingReward(address _user, address _rewardAddress) public view returns (uint256) {
        PoolInfo storage pool = poolMap[_rewardAddress];
        if (address(pool.rewardToken) == address(0)) {
            return 0;
        }
        uint256 myStakeAmount = balanceOf[_user];
        if (myStakeAmount == 0) {
            return 0;
        }

        //没开始或者已经结束了
        if (block.number < pool.bonusStartBlock || block.number >= pool.bonusEndBlock) {
            return 0;
        }
        
        uint256 accPerShare = pool.accPerShare;
        if (block.number > pool.lastRewardBlock && totalStake != 0) {
            uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);
            uint256 reward = multiplier.mul(pool.rewardPerBlock);
            accPerShare = accPerShare.add(reward.mul(1e12).div(totalStake));
        }

        uint256 myRewardDebt = rewardDebt[pool.poolId][_user];
        // console.log('[KingKongChef] pendingReward', accPerShare, myRewardDebt);
        return myStakeAmount.mul(accPerShare).div(1e12).sub(myRewardDebt);
    }


    //一次更新全部矿池的accPerShare和lastRewardBlock
    function massUpdatePools() internal {
        address[] memory actives = activeArr;
        for (uint8 i = 0; i < actives.length; i++) {
            address rewardAddress = actives[i];
            if (rewardAddress != address(0)) {

                PoolInfo storage pool = poolMap[rewardAddress];
                if (block.number < pool.bonusStartBlock || block.number >= pool.bonusEndBlock) {
                    continue;
                }
                if (block.number <= pool.lastRewardBlock) {
                    continue;
                }
                if (totalStake == 0) {
                    //特殊情况，跳过出矿
                    pool.lastRewardBlock = block.number;
                    continue;
                }
                uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);
                uint256 reward = multiplier.mul(pool.rewardPerBlock);
                pool.accPerShare = pool.accPerShare.add(reward.mul(1e12).div(totalStake));
                pool.lastRewardBlock = block.number;
                // console.log('updatePool', pool.accPerShare, pool.lastRewardBlock);
            }
        }
    }


    // Withdraw without caring about rewards. EMERGENCY ONLY.
    function emergencyWithdraw() public {
        uint256 myStakeAmount = balanceOf[msg.sender];
        require(myStakeAmount > 0, 'withdraw: not good');
        
        //提现
        balanceOf[msg.sender] = 0;
        totalStake = totalStake.sub(myStakeAmount);
        stakeToken.safeTransfer(msg.sender, myStakeAmount);

        emit EmergencyWithdraw(msg.sender, myStakeAmount);
    }

}

contract Deployer {

    mapping(uint256 => address) public getChef;
    address[] public allChefs;

    event ChefCreated(uint256 indexed blockNum, address chef, uint);

    constructor() public {
    }

    function allChefsLength() external view returns (uint) {
        return allChefs.length;
    }

    function createChef(address _stakeToken, address _owner) external returns (address chefAddress) {
        KingChef chef = new KingChef(_stakeToken);
        chefAddress = address(chef);
        chef.transferOwnership(_owner);
        getChef[block.number] = chefAddress;
        allChefs.push(chefAddress);
        emit ChefCreated(block.number, chefAddress, allChefs.length);
    }

}
